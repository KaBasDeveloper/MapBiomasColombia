/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var altitude = ee.Image("JAXA/ALOS/AW3D30_V1_1"),
    shademask2_v1 = ee.Image("projects/mapbiomas-raisg/MOSAICOS/shademask2_v1"),
    geometry_13 = /* color: #3d60ff */ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-70.44405823309776, 2.2414425274252405],
                  [-70.4571044977462, 2.2325229383674814],
                  [-70.44886475165245, 2.2215449083140015],
                  [-70.42551880438683, 2.224289423492906]]]),
            {
              "id": 13,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-70.42757874091026, 2.277806441137374],
                  [-70.41933899481651, 2.2599676538690887],
                  [-70.39873962958214, 2.26065376513581],
                  [-70.39805298407433, 2.2750620266627446]]]),
            {
              "id": 13,
              "system:index": "1"
            })]),
    geometry_25 = 
    /* color: #0023ff */
    /* displayProperties: [
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      }
    ] */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-75.74312914937966, 2.0140250511405857],
                  [-75.74312914937966, 2.0131672742454705],
                  [-75.74201335042946, 2.0131672742454705],
                  [-75.74201335042946, 2.0140250511405857]]], null, false),
            {
              "id": 25,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-75.74364413351051, 2.018313928838398],
                  [-75.74364413351051, 2.0178850415773533],
                  [-75.74312914937966, 2.0178850415773533],
                  [-75.74312914937966, 2.018313928838398]]], null, false),
            {
              "id": 25,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-75.65602545853667, 2.290178401549839],
                  [-75.65602545853667, 2.287434010696578],
                  [-75.65465216752105, 2.287434010696578],
                  [-75.65465216752105, 2.290178401549839]]], null, false),
            {
              "id": 25,
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-75.64400916214996, 2.3059585467422665],
                  [-75.64400916214996, 2.3052724571034955],
                  [-75.64229254838042, 2.3052724571034955],
                  [-75.64229254838042, 2.3059585467422665]]], null, false),
            {
              "id": 25,
              "system:index": "3"
            })]),
    geometry = /* color: #000000 */ee.Geometry.LineString(
        [[-75.92019432015366, 2.1994717892987756],
         [-75.9284340662474, 2.070472069662882],
         [-75.7032143396849, 2.0540032508417996],
         [-75.71145408577866, 2.2131945187644715],
         [-75.9229409021849, 2.218683575029552]]),
    geometry_21 = 
    /* color: #ffc82d */
    /* displayProperties: [
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      }
    ] */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-75.65087561722808, 2.291893643163907],
                  [-75.65087561722808, 2.2905214500369833],
                  [-75.64915900345855, 2.2905214500369833],
                  [-75.64915900345855, 2.291893643163907]]], null, false),
            {
              "id": 21,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-75.65018897172027, 2.296353261738815],
                  [-75.65018897172027, 2.2946380254711705],
                  [-75.64881568070464, 2.2946380254711705],
                  [-75.64881568070464, 2.296353261738815]]], null, false),
            {
              "id": 21,
              "system:index": "1"
            })]),
    Muestra33_1995_1997 = 
    /* color: #7808d6 */
    /* displayProperties: [
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      }
    ] */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-75.58192121305426, 2.3707472165688226],
                  [-75.58192121305426, 2.369761008138532],
                  [-75.58101999082525, 2.369761008138532],
                  [-75.58101999082525, 2.3707472165688226]]], null, false),
            {
              "reference": 33,
              "t0": 1995,
              "t1": 1997,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-75.56602719714678, 2.4637127027348757],
                  [-75.56602719714678, 2.463455448658213],
                  [-75.56529763629473, 2.463455448658213],
                  [-75.56529763629473, 2.4637127027348757]]], null, false),
            {
              "reference": 33,
              "t0": 1995,
              "t1": 1997,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-75.53826433023445, 2.529741140371531],
                  [-75.53826433023445, 2.5287550490165422],
                  [-75.53738456567757, 2.5287550490165422],
                  [-75.53738456567757, 2.529741140371531]]], null, false),
            {
              "reference": 33,
              "t0": 1995,
              "t1": 1997,
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-75.67022593264376, 2.180575595668123],
                  [-75.67022593264376, 2.179546372882089],
                  [-75.66833765749728, 2.179546372882089],
                  [-75.66833765749728, 2.180575595668123]]], null, false),
            {
              "reference": 33,
              "t0": 1995,
              "t1": 1997,
              "system:index": "3"
            })]),
    Muestra21_2005_2008 = 
    /* color: #eeff39 */
    /* displayProperties: [
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      }
    ] */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-75.75941610807466, 2.0412064007478525],
                  [-75.75941610807466, 2.0404987467253966],
                  [-75.75851488584566, 2.0404987467253966],
                  [-75.75851488584566, 2.0412064007478525]]], null, false),
            {
              "reference": 21,
              "t0": 2005,
              "t1": 2008,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-75.76085377210664, 2.0374536864711703],
                  [-75.76085377210664, 2.0363385925430606],
                  [-75.75948048109102, 2.0363385925430606],
                  [-75.75948048109102, 2.0374536864711703]]], null, false),
            {
              "reference": 21,
              "t0": 2005,
              "t1": 2008,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-75.75727034086275, 2.0364243690264856],
                  [-75.75727034086275, 2.0356094922497703],
                  [-75.75621891492891, 2.0356094922497703],
                  [-75.75621891492891, 2.0364243690264856]]], null, false),
            {
              "reference": 21,
              "t0": 2005,
              "t1": 2008,
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-75.76458740705537, 2.036638810215023],
                  [-75.76458740705537, 2.0361884836861135],
                  [-75.76342869276094, 2.0361884836861135],
                  [-75.76342869276094, 2.036638810215023]]], null, false),
            {
              "reference": 21,
              "t0": 2005,
              "t1": 2008,
              "system:index": "3"
            })]),
    Muestra12_2021_2022 = 
    /* color: #0b4a8b */
    /* displayProperties: [
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      }
    ] */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-75.69806329470242, 2.0724113262826878],
                  [-75.69806329470242, 2.0721968898968264],
                  [-75.69783798914517, 2.0721968898968264],
                  [-75.69783798914517, 2.0724113262826878]]], null, false),
            {
              "reference": 12,
              "t0": 2021,
              "t1": 2022,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-75.69806329470242, 2.0702347956180005],
                  [-75.69806329470242, 2.0701382991153765],
                  [-75.69795600634183, 2.0701382991153765],
                  [-75.69795600634183, 2.0702347956180005]]], null, false),
            {
              "reference": 12,
              "t0": 2021,
              "t1": 2022,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-75.69906107645596, 2.0716071896859316],
                  [-75.69906107645596, 2.0714570841426645],
                  [-75.69896451693143, 2.0714570841426645],
                  [-75.69896451693143, 2.0716071896859316]]], null, false),
            {
              "reference": 12,
              "t0": 2021,
              "t1": 2022,
              "system:index": "2"
            })]),
    Muestra33_1985 = 
    /* color: #3e5fff */
    /* displayProperties: [
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      }
    ] */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-75.64559905266917, 2.2890778622476353],
                  [-75.64559905266917, 2.2889063378415306],
                  [-75.64547030663645, 2.2889063378415306],
                  [-75.64547030663645, 2.2890778622476353]]], null, false),
            {
              "reference": 33,
              "t0": 1985,
              "t1": 1985,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-75.6367799494282, 2.287384057838193],
                  [-75.6367799494282, 2.287319736112328],
                  [-75.63647954201853, 2.287319736112328],
                  [-75.63647954201853, 2.287384057838193]]], null, false),
            {
              "reference": 33,
              "t0": 1985,
              "t1": 1985,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-75.64251000902735, 2.2638236794538704],
                  [-75.64251000902735, 2.263566388329153],
                  [-75.64244563601099, 2.263566388329153],
                  [-75.64244563601099, 2.2638236794538704]]], null, false),
            {
              "reference": 33,
              "t0": 1985,
              "t1": 1985,
              "system:index": "2"
            })]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/** 
 * STEP 04-0: CLASIFICACION
 * by: Ajust 14/10/2021 EYTC
 *           08/03/2022 EYTC:  
 * ----------------------------------------------------------------------------------------------
 */
 
var param = {
  country: 'COLOMBIA',
  regionId: 30401,
  trees: 60,
  variables: [
      // "pri_median",
      // "gcvi_dry",
      // "nir_dry",
      // "swir1_dry",
      // "ndvi_wet",
      // "evi2_wet",
      // "ndwi_mcfeeters_amp",
      // "ndvi_stdDev",
      // "ndwi_gao_median",
      // "ndfi_wet",
      // "swir2_min",
      // "npv_stdDev",
      // "wefi_amp",
      // "shade_median",
      // "fns_stdDev",
      // "snow_median",
      // "ndwi_mcfeeters_median",
      // "swir1_median",
      // "soil_median",
      // "swir2_median",
      // "gv_amp",
      // "savi_wet",
      // "red_median",
      // "ndsi_median",
      // "swir2_wet",
      // "hallcover_median",
      // "pri_dry",
      // "ndwi_gao_wet",
      // "nir_median",
      // "nir_min",
      // "gvs_median",
      // "evi2_stdDev",
      // "red_min",
      // "ndvi_median",
      // "ndfi_stdDev",
      // "savi_median",
      // "green_min",
      // "gvs_dry",
      // "snow_min",
      // "nir_wet",
      // "red_wet",
      // "wefi_wet",
      // "nir_stdDev",
      // "evi2_median",
      // "soil_amp",
      // "ndwi_gao_amp",
      // "gcvi_wet",
      // "gcvi_median",
      // "savi_stdDev",
      // "wefi_stdDev",
      // "sefi_stdDev",
      // "ndfi_amp",
      // "npv_median",
      // "evi2_amp",
      // "gvs_stdDev",
      // "soil_stdDev",
      // "ndfi_median",
      // "gv_stdDev",
      // "swir1_wet",
      // "ndvi_dry",
      // "ndfi_dry",
      // "evi2_dry",
      // "green_dry",
      // "ndfib_amp",
      // "blue_median",
      // "gv_median",
      // "savi_dry",
      // "ndfib_median",
      // "textG_median",
      // "fns_dry",
      // "nuaci_median",
      // "swir1_min",
      // "ndwi_gao_dry",
      // "ndvi_amp",
      // "red_dry",
      // "sefi_median",
      // "gvs_wet",
      // "green_median",
      // "swir2_dry",
      // "ndsi_min",
      // "sefi_dry",
  ],
  tileScale: 16,
  additionalSamples: {
    polygons: [geometry_13,geometry_25,geometry_21],
    classes: [13,25,21],
    points: [8000,8000,9000],
    SamplesRegionVecina: ''   // otra region para tomar muestra adicionales ejemplo:'70305', sino se va a usar dejarlo vacio ''
  },
  additionalSamplesNoStable: { // MUESTRAS NO ESTABLES Muestra24_1985_1990, Muestra27_1985_1990, Muestra27_1985
    polygons: [Muestra33_1995_1997, 
               Muestra21_2005_2008,
               Muestra12_2021_2022,
               Muestra33_1985
               ],  // El Numero de Muestras no estables es el total de pixeles que interceptan con el mosaico (no se hace sorteo)
                               },
  yearsPreview: [2022,1985],
  driveFolder: 'RF-PRELIMINAR-CLASSIFICATION',
  samplesVersion: 1,
  outputVersion: 1,
  exports : {
    importance_variable: true,
    classification_drive: false
     }
};



/**
 * Import Modules CollectionDirectories
 */
var paths = require('users/raisgmb01/projects-mapbiomas:mapbiomas-colombia/collection-5/modules/CollectionDirectories.js').paths;


/**
 * Get region vector and mask
 */
var regclasificacion = paths.regionVector;
var region = ee.FeatureCollection(regclasificacion)
region = region.filterMetadata("id_regionC", "equals", param.regionId);

// print("region",region)
// Map.addLayer(region)

var regionMask = region
  .map(function(item) {
    return item.set('version', 1);
  })
  .reduceToImage(['version'], ee.Reducer.first());


var geom = ee.FeatureCollection(
    region.geometry().bounds()
  )
  .map(function(item) {
    return item.set('version', 1);
  })
  .reduceToImage(['version'], ee.Reducer.first());
 
 // geom y regionMask son iguales
  // print("regionMask",regionMask)
  // print("geom",geom)
  // Map.addLayer(geom)
  // Map.addLayer(regionMask)
/**
 * Input data
 */
// Parameters
var country = param.country;
var regionId = param.regionId;
var variables = param.variables;
var nBands = variables.length;
var outputVersion = param.outputVersion;
var trees = param.trees;
var additionalSamples = param.additionalSamples;
var yearsPreview = param.yearsPreview;
var driveFolder = param.driveFolder;
var samplesVersion = param.samplesVersion;


// Paths
var basePath = paths.classification+ '/';
var samplesPath = paths.trainingPoints01;
var trainingSamples = samplesPath + 'samples-' + country + '-' + regionId;

// print("trainingSamples",trainingSamples)
 
if(param.additionalSamples.SamplesRegionVecina !== ''){
   var trainingSamplesRaisg = samplesPath + 'samples-' + country + '-' + param.additionalSamples.SamplesRegionVecina;
}
 
 
// Imports
var palette = require('users/mapbiomas/modules:Palettes.js').get('classification2');


// Constants
var years = [
  1985, 
  // 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 
  // 1994, 1995,
  // 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 
  // 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,
  // 2018, 2019, 2020, 2021, 
  2022
];


// Outputs initialization
var variablesImportance = ee.FeatureCollection([]);
var classified = ee.Image(0);

/**
 * Set up mosaics
 */
var mosaicRegion = param.regionId.toString().slice(0, 3);
var joinedMosaics;


if(true){
 // Importar datos de altitud
  var altitude = ee.Image('JAXA/ALOS/AW3D30_V1_1')
    .select('AVE')
    .rename('altitude');
      
  var slope = ee.Terrain.slope(altitude).int8()
    .rename('slope');
    
  /**
   * Hand
   */
  //-----------------------------------------------------------------------------
    var hand30_100 = ee.ImageCollection('users/gena/global-hand/hand-100');
    var srtm = ee.Image("USGS/SRTMGL1_003");
    var hand30_1000 =  ee.Image("users/gena/GlobalHAND/30m/hand-1000");
    var hand90_1000 = ee.Image("users/gena/GlobalHAND/90m-global/hand-1000");
    var hand30_5000 = ee.Image("users/gena/GlobalHAND/30m/hand-5000");
    var fa = ee.Image("users/gena/GlobalHAND/90m-global/fa");
    var jrc = ee.Image("JRC/GSW1_0/GlobalSurfaceWater");
    var HS_fa = ee.Image("WWF/HydroSHEDS/15ACC");
    var HS_fa30 = ee.Image("WWF/HydroSHEDS/30ACC");
    var demUk = ee.Image("users/gena/HAND/test_uk_DSM");
    
    // smoothen HAND a bit, scale varies a little in the tiles
    hand30_100 = hand30_100.mosaic().focal_mean(0.1);
    
    // potential water (valleys)
    var thresholds = [0,1,2,5,10];
    var HANDm = ee.List([]);
    thresholds.map(function(th) {
      var water = hand30_100.lte(th)
        .focal_max(1)
        .focal_mode(2, 'circle', 'pixels', 5).mask(swbdMask);
        
      HANDm = HANDm.add(water.mask(water).set('hand', 'water_HAND_<_' + th + 'm'));
    });
    
    // exclude SWBD water
    var swbd = ee.Image('MODIS/MOD44W/MOD44W_005_2000_02_24').select('water_mask');
    Map.addLayer(swbd, {}, 'swbd mask', false);
    var swbdMask = swbd.unmask().not().focal_median(1);
    
    // water_hand	water (HAND < 5m)
    var HAND_water = ee.ImageCollection(HANDm)
    
    // exports.
    hand30_100  =hand30_100.rename('hand30_100');
    hand30_1000 =hand30_1000.rename('hand30_1000');
    hand30_5000 =hand30_5000.rename('hand30_5000');
    hand90_1000 =hand90_1000.rename('hand90_1000');
    HAND_water  =HAND_water.toBands().rename(['water_HAND_0m',
                                                  'water_HAND_1m',
                                                  'water_HAND_2m',
                                                  'water_HAND_5m',
                                                  'water_HAND_10m']);
            
    var Hand_bands =  hand30_100.addBands(hand30_1000)
                                .addBands(hand30_5000)
                                .addBands(hand90_1000)
                                .addBands(HAND_water);
                                
    // print(Hand_bands)
  
  /**
   * Latitud Longitud
   */
  //-----------------------------------------------------------------------------
  var longLat = ee.Image.pixelLonLat();
  
  /**
   * ShadeMask2
   */
  //-----------------------------------------------------------------------------
  var shademask2 = ee.Image("projects/mapbiomas-raisg/MOSAICOS/shademask2_v2").rename('shademask2');
  
  /**
   * slppost
   */
  //-----------------------------------------------------------------------------
  var slppost = ee.Image("projects/mapbiomas-raisg/MOSAICOS/slppost2_30_v2").rename('slppost');
  
  //-----------------------------------------------------------------------------

 // var joinedMosaics = mosaics[0];
  var joinedMosaics = ee.ImageCollection(paths.mosaics_path_row_L2).map(function(image){
                      return ee.Image.cat(image, altitude, slope,longLat,Hand_bands,slppost,shademask2)});
  joinedMosaics = joinedMosaics.filterMetadata('region_code', 'equals', Number(mosaicRegion))
}

//print(joinedMosaics.first().bandNames())
/**
 * Function for taking additional samples
 */
var resampleCover = function(mosaic, additionalSamples) {
  
  var polygons = additionalSamples.polygons,
      classIds = additionalSamples.classes,
      points = additionalSamples.points,
      newSamples = [];
  
  polygons.forEach(function(polygon, i) {
    
    var newSample = mosaic.sample({
      numPixels: points[ i ],
      region: polygon,
      scale: 30,
      projection: 'EPSG:4326',
      seed: 1,
      geometries: true,
      tileScale:param.tileScale
    })
    .map(function(item) { return item.set('reference', classIds[ i ]) });
    
    newSamples.push(newSample);

  });
  
  return ee.FeatureCollection(newSamples).flatten();

};

/**
 * Implement random forests classification
 */
ee.List(years).evaluate(function(years, error){
  
  if(error) print(error.message);
  
  var variablesImportance = ee.FeatureCollection([]);

  years.forEach(function(year) {
  
    var yearMosaic = joinedMosaics
      .filterMetadata('year', 'equals', year)
      .median()
      .updateMask(regionMask);
      
    var yearMosaicRGB = yearMosaic;
    
    if(variables.length > 0) yearMosaic = yearMosaic.select(variables);
      
    var bands = yearMosaic.bandNames();
    
    var contained = bands.containsAll(ee.List(variables));
    

    var yearTrainingSamples = ee.FeatureCollection(
      ee.Algorithms.If(
        contained,
        ee.FeatureCollection(
          trainingSamples + '-' + year + '-' + 'p03-' + samplesVersion),
        null
      )
    );

// print("CrudoyearTrainingSamples",yearTrainingSamples)
    
    var nClasSample = ee.List(
      ee.Algorithms.If(
        contained,
        yearTrainingSamples
          .reduceColumns(ee.Reducer.toList(), ['reference'])
          .get('list'),
        null
      )
    );

    
    // Identify number of classes in th samples.
    nClasSample = nClasSample.reduce(ee.Reducer.countDistinct());
    
    
    // Here we put additional samples
    if(additionalSamples.polygons.length > 0){
      
      var insidePolygons = ee.FeatureCollection(additionalSamples.polygons)
        .flatten()
        .reduceToImage(['id'], ee.Reducer.first());
      
      var outsidePolygons = insidePolygons.mask().eq(0).selfMask();
      outsidePolygons = geom.updateMask(outsidePolygons);

      
      var outsideVector = outsidePolygons.reduceToVectors({
        reducer: ee.Reducer.countEvery(),
        geometry: region.geometry().bounds(),
        scale: 30,
        maxPixels: 1e13
      });

      
      var newSamples = resampleCover(yearMosaic, additionalSamples);
      
      
      yearTrainingSamples = yearTrainingSamples.filterBounds(outsideVector)
        .merge(newSamples);
    }
    
    if(param.additionalSamples.SamplesRegionVecina !== ''){
       var yearTrainingSamplesRaisg = trainingSamplesRaisg + '-' + year + '-' + 'p03-' + samplesVersion;
       yearTrainingSamples = yearTrainingSamples
                             .merge(yearTrainingSamplesRaisg);
        }
    print('yearTrainingSamples-'+year,yearTrainingSamples.limit(1))
   
// Here we put additional samples no stable
// print("EstablesyearTrainingSamples",yearTrainingSamples)
    // merges all polygons
    var regionsNoStableSample = ee.FeatureCollection(param.additionalSamplesNoStable.polygons).flatten()
    var yearst0 = regionsNoStableSample.aggregate_min('t0').getInfo();
    var yearst1 = regionsNoStableSample.aggregate_max('t1').getInfo();
    
      if(param.additionalSamplesNoStable.polygons.length > 0 & year >= yearst0 & year <= yearst1){
         // filter by user defined region "userRegion" if exists
        var PolygonsYear = regionsNoStableSample
                              .filterBounds(region)
                              .filter(ee.Filter.and(ee.Filter.lte('t0', year), 
                                                    ee.Filter.gte('t1', year)
                              ));
                              
        var newNoStableSamples =  yearMosaic.sampleRegions(PolygonsYear, ['reference'], 30, null, 4)
        
        print(year)
        // Map.addLayer(newNoStableSamples,{},'addNssample',false)
        print(newNoStableSamples.aggregate_histogram('reference'))
        yearTrainingSamples = yearTrainingSamples.merge(newNoStableSamples);
      }
      
// print("NoEstablesyearTrainingSamples",yearTrainingSamples)   
    // Define classifier and compute importance tables
    var classifier = ee.Classifier.smileRandomForest({
        numberOfTrees: trees, 
        variablesPerSplit: 1
    });
    
      classifier = ee.Classifier(
      ee.Algorithms.If(
        contained,
        ee.Algorithms.If(
          // solución al problema 'only one class'
          ee.Algorithms.IsEqual(nClasSample, 1),
          null,
          classifier.train(yearTrainingSamples, 'reference', bands)
        ),
        null
      )
    );
    
    
    var explainer = ee.Dictionary(
      ee.Algorithms.If(
        contained,
        ee.Algorithms.If(
          ee.Algorithms.IsEqual(nClasSample, 1) ,
          null,
          classifier.explain()
        ),
        null
      )
    );
    
    
    //Importance table
    var importances = ee.Feature(
      ee.Algorithms.If(
        contained,
        ee.Algorithms.If(
          // solución al problema 'only one class'
          ee.Algorithms.IsEqual(nClasSample, 1),
          null,
          ee.Feature( null, 
            ee.Dictionary(explainer.get('importance')))
              .set('_trees', explainer.get('numberOfTrees'))
              .set('_oobError', explainer.get('outOfBagErrorEstimate'))
              .set('_year', year)
        ),
        null
      )
    );
    
    variablesImportance = variablesImportance
        .merge( ee.FeatureCollection( [ importances ] ));
    
    
    
    // Compute classification
    var img = yearMosaic.classify(classifier)
      .select(['classification'], ['classification_' + year]);
      

    var maskBand = ee.Image(27).rename('classification_' + year);


    classified = ee.Image(
      ee.Algorithms.If(
        contained,
        ee.Algorithms.If(
          // Solution to problem of 'only one class'
          ee.Algorithms.IsEqual(nClasSample, 1),
          classified.addBands(maskBand),
          classified.addBands(img)
        ),
        classified.addBands(maskBand)
      )
    ).unmask(27).updateMask(regionMask).toByte();
    
    
    // display mosaic and classification
    if(yearsPreview.indexOf(year) > -1) {
      Map.addLayer(
        yearMosaicRGB,
        {
          bands: ['swir1_median', 'nir_median', 'red_median'],
          gain: [0.08, 0.06, 0.2]
        },
        'MOSAICO ' + year.toString(), false
      );
      
      Map.addLayer(
        img.select('classification_' + year)
           .unmask(27).updateMask(regionMask),
        {
          min: 0,
          max: 34,
          palette: palette
        },
        'CLASIFICACIÓN ' + year, false
      );
    }
    
    return classified;

  });
  
  
  classified = classified.slice(1).toInt8()
    .set({
      code_region: regionId,
      pais: country,
      version: outputVersion,
      RFtrees: trees,
      samples_version: samplesVersion,
      descripcion: 'clasificacion-v1',
      paso: 'P04-0'
    });
  

  // Exportar assets a GEE y Google Drive
  var filename = country + '-' + regionId + '-' + outputVersion;
  var imageId = basePath + filename;  
  var tableName = 'IMPORTANCE-TABLE-' + country + '-';
  tableName = tableName + regionId + '-' + outputVersion;
  
  Export.image.toAsset({
    image: classified,
    description: filename,
    assetId: imageId,
    scale: 30,
    pyramidingPolicy: {
      '.default': 'mode'
    },
    maxPixels: 1e13,
    region: region.geometry().bounds()
  });
  
if(param.exports.classification_drive){
  Export.image.toDrive({
    image: classified,
    description: filename + '-DRIVE',
    folder: driveFolder,
    scale: 30,
    maxPixels: 1e13,
    region: region.geometry().bounds()
  });
  }
  
  if(param.exports.importance_variable){
  Export.table.toDrive({
    collection: variablesImportance, 
    description: tableName,
    folder: driveFolder,
    fileFormat: 'CSV',
  });
  }
  
});


